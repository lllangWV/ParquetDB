import os
import sys
from datetime import datetime

import openai
from github import Github
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Get environment variables from GitHub Actions
PR_NUMBER = os.getenv("PR_NUMBER")
REPO_NAME = os.getenv("REPO_NAME")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
RELEASE_PR_NUMBER = os.getenv("RELEASE_PR_NUMBER")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Template for summarizing commits
summarize_commit_message_template = """
I have the following commit messages:

{commit_messages}

Classify them into the following categories:
1. Bugs
2. New Features
3. Documentation
4. Maintenance

Then, summarize the changes for each category into a bullet point list. 

Follow these instructions:
1. Use Markdown formatting
2. Use 5 "#" to indicate a new category.
3. Do not number the categories.
4. If there are no changes, return "No changes"
5. Improve the writing from the commit message and be concise.
6. RETURN ONLY THE SUMMARY IN BULLET POINT FORMAT.

Here is an example:

##### Bugs
- None identified
##### New features
- Added new action to execute python script on push to main
##### Documentation updates
- Updated readme
##### Maintenance
- Moved GitHub actions scripts directory to root
- Added tests
- Changed version
"""


def get_pr_commits(repo_name, pr_number, github_token):
    """Get commits from a specific PR"""
    if not github_token:
        raise RuntimeError("Please set GITHUB_TOKEN in your environment")

    gh = Github(github_token)
    repo = gh.get_repo(repo_name)
    pr = repo.get_pull(int(pr_number))

    commit_messages = []
    for commit in pr.get_commits():
        commit_messages.append(commit.commit.message)

    return commit_messages


def summarize_commit_messages(commit_messages):
    """Use OpenAI to summarize commit messages"""
    client = openai.OpenAI(api_key=OPENAI_API_KEY)

    # Call the OpenAI API to classify and summarize the changes
    completion = client.chat.completions.create(
        model="o4-mini-2025-04-16",
        temperature=1.0,
        messages=[
            {
                "role": "system",
                "content": "You are a professional programmer that is excellent with github hub repository management. Your goal is to help the user with tasks\n",
            },
            {
                "role": "user",
                "content": summarize_commit_message_template.format(
                    commit_messages="\n".join(commit_messages)
                ),
            },
        ],
    )

    changes_summary = completion.choices[0].message.content.strip()
    return changes_summary


def post_comment_to_release_pr(repo_name, pr_number, comment_body, github_token):
    """Post a comment to the release PR"""
    if not github_token:
        raise RuntimeError("Please set GITHUB_TOKEN in your environment")

    gh = Github(github_token)
    repo = gh.get_repo(repo_name)
    pr = repo.get_pull(int(pr_number))

    pr.create_issue_comment(comment_body)
    print(f"Posted commit summary to PR #{pr_number}")


def main():
    if not all([PR_NUMBER, REPO_NAME, GITHUB_TOKEN, RELEASE_PR_NUMBER, OPENAI_API_KEY]):
        missing = []
        if not PR_NUMBER:
            missing.append("PR_NUMBER")
        if not REPO_NAME:
            missing.append("REPO_NAME")
        if not GITHUB_TOKEN:
            missing.append("GITHUB_TOKEN")
        if not RELEASE_PR_NUMBER:
            missing.append("RELEASE_PR_NUMBER")
        if not OPENAI_API_KEY:
            missing.append("OPENAI_API_KEY")
        print(f"Missing required environment variables: {', '.join(missing)}")
        sys.exit(1)

    # Get commits from the PR that was just merged
    commit_messages = get_pr_commits(REPO_NAME, PR_NUMBER, GITHUB_TOKEN)

    # Summarize the commits
    summary = summarize_commit_messages(commit_messages)

    # Create comment body
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    comment_body = f"""
## PR #{PR_NUMBER} Summary - Added to Release PR

*Generated on: {current_date}*

{summary}

---
*This comment was automatically generated by the release workflow.*
"""

    # Post the comment to the release PR
    post_comment_to_release_pr(REPO_NAME, RELEASE_PR_NUMBER, comment_body, GITHUB_TOKEN)


if __name__ == "__main__":
    main()
