name: Deploy to Dev on Feature Merge

on:
  pull_request:
    types: [closed]
    branches: [ main ]


env:
    RELEASE_BRANCH_NAME: next-release


permissions:
  contents: write         # you almost certainly already have this
  pull-requests: write    # <-- allow read/write on PRs via GraphQL test2
  

jobs:

  deploy-to-dev:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Deploy to development environment
        run: |
          echo "Deploying to dev environment..."
          # Add your deployment commands here

  # Check PR status and expose values to downstream jobs
  check-pr-status:
    needs: deploy-to-dev
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest
    outputs:
      is_release_pr: ${{ steps.check-rel.outputs.is_release }}
      exists_release: ${{ steps.detect.outputs.exists }}
      release_pr_number: ${{ steps.detect.outputs.pr_number }}
      branch_name: ${{ steps.detect.outputs.branch_name }}
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Check whether this was a Release PR
        id: check-rel
        run: |
          if [[ "${{ github.event.pull_request.title }}" == Release* ]]; then
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Detect or compute release branch name
        id: detect
        run: |
          PR=$(gh pr list \
            --state open \
            --json number,headRefName \
            --jq 'map(select(.headRefName=="${{ env.RELEASE_BRANCH_NAME }}"))[0].number // ""')

          if [ -n "$PR" ]; then
            # Found an existing Release PR targeting that branch
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$PR" >> $GITHUB_OUTPUT
            echo "branch_name=${{ env.RELEASE_BRANCH_NAME }}" >> $GITHUB_OUTPUT
          else
            # No PR found → check if the branch exists remotely
            if git ls-remote --exit-code origin refs/heads/${{ env.RELEASE_BRANCH_NAME }}; then
              echo "Remote branch exists but no PR, deleting it…" 
              git push origin --delete ${{ env.RELEASE_BRANCH_NAME }}
            fi

            # Delete any local leftover
            git branch --list ${{ env.RELEASE_BRANCH_NAME }} && git branch -D ${{ env.RELEASE_BRANCH_NAME }} || true

            echo "exists=false" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "branch_name=${{ env.RELEASE_BRANCH_NAME }}" >> $GITHUB_OUTPUT
          fi

  update-release-pr:
    needs: check-pr-status
    if: >
      needs.check-pr-status.outputs.is_release_pr == 'false'
      &&
      needs.check-pr-status.outputs.exists_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out release branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ needs.check-pr-status.outputs.branch_name }}
          
      - name: Configure git for committing
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
            
      - name: Merge in the just-closed PR
        run: |
          PR_NUM=${{ github.event.pull_request.number }}
          git fetch origin +refs/pull/$PR_NUM/head:pr-head
          git merge --no-ff pr-head -m "Merge PR #$PR_NUM into ${{ needs.check-pr-status.outputs.branch_name }}"
          git push origin ${{ needs.check-pr-status.outputs.branch_name }}
      
      # New steps to summarize commits
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai python-dotenv PyGithub
          
      - name: Create script for commit summarization
        run: |
          cat > summarize_pr_commits.py << 'EOF'
          # Python script contents here - copy the entire script from above
          EOF
          
      - name: Run commit summarization script
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_PR_NUMBER: ${{ needs.check-pr-status.outputs.release_pr_number }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python .github/scripts/summarize_pr_commits.py

  # Create a new Release PR if one doesn't exist
  create-release-pr:
    needs: check-pr-status
    if: >
      needs.check-pr-status.outputs.is_release_pr == 'false'
      &&
      needs.check-pr-status.outputs.exists_release == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Check out main branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure git for committing
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Determine last release tag
        run: |
          PREV_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "PREV_TAG=$PREV_TAG" >> $GITHUB_ENV

      - name: Create new release branch from last tag
        run: |
          git fetch --tags origin
          git checkout -b ${{ env.RELEASE_BRANCH_NAME }} "$PREV_TAG"

      - name: Merge in the just-closed PR
        run: |
          PR_NUM=${{ github.event.pull_request.number }}
          git fetch origin +refs/pull/$PR_NUM/head:pr-head
          git merge --no-ff pr-head -m "Merge PR #$PR_NUM"

      - name: Push & open Release PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push -u origin "${{ env.RELEASE_BRANCH_NAME }}"
          NEW_PR=$(gh pr create \
            --title "Release v*.*.*" \
            --body "Automated Release PR for ${{ env.RELEASE_BRANCH_NAME }}" \
            --base main \
            --head "${{ env.RELEASE_BRANCH_NAME }}"\
            )
          # Get the PR number using a separate command
          NEW_PR=$(gh pr list --head "${{ env.RELEASE_BRANCH_NAME }}" --state open --limit 1 | awk '{print $1}')
          echo "RELEASE_PR_NUMBER=$NEW_PR" >> $GITHUB_ENV
          
      # New steps to summarize commits
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install openai python-dotenv PyGithub
          
      - name: Create script for commit summarization
        run: |
          cat > summarize_pr_commits.py << 'EOF'
          # Python script contents here - copy the entire script from above
          EOF
          
      - name: Run commit summarization script
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO_NAME: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_PR_NUMBER: ${{ env.RELEASE_PR_NUMBER }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: python .github/scripts/summarize_pr_commits.py

  # Create GitHub Release when a Release PR is merged
  create-github-release:
    needs: check-pr-status
    if: needs.check-pr-status.outputs.is_release_pr == 'true'
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.create-tag.outputs.tag_name }}
      release_version: ${{ steps.extract-version.outputs.version }}
    steps:
        - name: Check out code
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
                
        - name: Authenticate GitHub CLI
          run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        
        - name: Extract version from PR title
          id: extract-version
          run: |
            # Get version from PR title with 'v' prefix
            VERSION=$(echo "${{ github.event.pull_request.title }}" | sed -E 's/Release[[:space:]]+v([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            
            # If the version extraction failed, try fallback pattern without 'v'
            if [ -z "$VERSION" ]; then
            VERSION=$(echo "${{ github.event.pull_request.title }}" | sed -E 's/Release[[:space:]]+([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
            fi
            
            # If both patterns failed, generate a timestamp-based version
            if [ -z "$VERSION" ]; then
            VERSION=$(date +"%Y.%m.%d")-$(git rev-parse --short HEAD)
            echo "No version found in PR title, using generated version: $VERSION"
            else
            echo "Extracted version from PR title: $VERSION"
            fi
            
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'
            
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install openai python-dotenv PyGithub
            pip install .[dev]

        - name: Run comment summarization script
          env:
            PR_NUMBER: ${{ github.event.pull_request.number }}
            REPO_NAME: ${{ github.repository }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            VERSION: ${{ steps.extract-version.outputs.version }}
            OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          run: python .github/scripts/summarize_release-pr_comments.py
            
        - name: Configure git
          run: |
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
        
        - name: Commit updated CHANGELOG to main
          run: |
            # Ensure we're on main branch
            git checkout main
            
            # Add CHANGELOG.md to git
            git add CHANGELOG.md
            
            # Create commit
            git commit -m "Update CHANGELOG for v${{ steps.extract-version.outputs.version }}" || echo "No changes to commit"
            
            # Push to main
            git push origin main
        
        - name: Create and push tag
          id: create-tag # <<< Added id here
          run: |
            TAG_NAME="${{ steps.extract-version.outputs.version }}"
            echo "Creating tag: $TAG_NAME pointing to merge commit ${{ github.event.pull_request.merge_commit_sha }}"
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME" "${{ github.event.pull_request.merge_commit_sha }}"
            git push origin "$TAG_NAME"

            echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT # <<< Output the tag name
            
        - name: Create GitHub Release with summarized notes
          run: |
            echo "Creating release for tag ${{ steps.create-tag.outputs.tag_name }}"
            gh release create "${{ steps.create-tag.outputs.tag_name }}" \
              --title "Release ${{ steps.create-tag.outputs.tag_name }}" \
              --notes-file RELEASE_NOTES.md \
              --target "${{ github.event.pull_request.merge_commit_sha }}" # Target the merge commit
            
        - name: Run post-release scripts
          run: |
            echo "Running post-release scripts..."
            # Add your post-release commands here

  create-release-branch-and-publish:
    # --- Add dependency ---
    needs: [create-github-release, check-pr-status] # Depend on release creation AND the check that determined it IS a release PR
    # --- Add condition --- (Optional but recommended for clarity)
    # This job should only run if the 'is_release_pr' check was true.
    # Since it needs create-github-release which *already* has this check,
    # it will be implicitly skipped if create-github-release is skipped.
    # Adding the 'if' explicitly makes the intent clearer.
    if: needs.check-pr-status.outputs.is_release_pr == 'true'
    runs-on: ubuntu-latest
    steps:
    # --- Checkout code using the tag from the previous job ---
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history so we can access the tag
        # --- Use the output from create-github-release job ---
        ref: ${{ needs.create-github-release.outputs.release_tag }}

    - name: Set up Python
      uses: actions/setup-python@v5 # Use v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    # --- Update Echo step ---
    - name: Echo release info
      run: |
        echo "REPO_NAME=${{ github.repository }}"
        # --- Use the output from create-github-release job ---
        echo "TAG=${{ needs.create-github-release.outputs.release_tag }}"

    # --- Update Build step ---
    - name: Build package
      env:
          # --- Use the output from create-github-release job ---
          SETUPTOOLS_SCM_PRETEND_VERSION: ${{ needs.create-github-release.outputs.release_tag }}
      run: python -m build

    # --- Update Create / update branch step ---
    - name: Create / update branch
      run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # --- Use the output from create-github-release job ---
          BRANCH_NAME="${{ needs.create-github-release.outputs.release_tag }}"

          echo "Creating/Updating branch '$BRANCH_NAME' to point to tag '$BRANCH_NAME'"
          # Force-create (-B) or fast-forward the branch to the commit the tag points to
          git checkout -B "$BRANCH_NAME" "$BRANCH_NAME^{commit}" # Point to the commit, not the tag object itself
          git push --force-with-lease origin "HEAD:refs/heads/$BRANCH_NAME"

    # --- Update Publish step if needed (looks OK) ---
    - name: Publish package
      # Condition already handled by job 'if' or skipped 'needs'
      # if: success() # Not strictly needed if depending on the previous step success implicitly
      uses: pypa/gh-action-pypi-publish@release/v1 # Use latest release version
      with:
        # Use OIDC / Trusted Publisher if possible (recommended)
        # Or use API token:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}